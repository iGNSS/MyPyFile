# coding=utf-8
# !/usr/bin/env python
"""
Program:
Function:
Author:LZ_CUMT
Version:1.0
Date:2022/01/01
"""
from cmn import *
import numpy as np
from math import pi, sin, cos, fmod

def AU():
    return 149597870691.0

def D2R():
    return (pi/180.0)

def R2D():
    return (180.0/pi)

def AS2R():
    return (D2R()/3600.0)

def satsys(sat):
    NSATGPS = 32
    NSATGLO = 27
    NSATGAL = 36
    NSATBDS = 46
    NSATQZS = 7
    NSAT = NSATGPS + NSATGLO + NSATGAL + NSATBDS + NSATQZS
    if sat < 0 or NSAT < sat:
        sys = ''
        prn = 0
    elif sat < NSATGPS:
        sys = 'G'
        prn = sat + 1
    elif sat - NSATGPS < NSATGLO:
        sys = 'R'
        prn = sat - NSATGPS + 1
    elif sat - NSATGPS - NSATGLO < NSATGAL:
        sys = 'E'
        prn = sat - NSATGPS - NSATGLO + 1
    elif sat - NSATGPS - NSATGLO - NSATGAL < NSATBDS:
        sys = 'C'
        prn = sat - NSATGPS - NSATGLO - NSATGAL + 1
    elif sat - NSATGPS - NSATGLO - NSATGAL - NSATBDS < NSATQZS:
        sys = 'J'
        prn = sat - NSATGPS - NSATGLO - NSATGAL - NSATBDS + 1
    else:
        sys = ''
        prn = 0
    return sys, prn

def ast_args(t):
    f = np.zeros(5)
    tt = np.zeros(4)
    fc = [[134.96340251, 1717915923.2178,  31.8792,  0.051635, -0.00024470],
          [357.52910918,  129596581.0481,  -0.5532,  0.000136, -0.00001149],
          [ 93.27209062, 1739527262.8478, -12.7512, -0.001037,  0.00000417],
          [297.85019547, 1602961601.2090,  -6.3706,  0.006593, -0.00003169],
          [125.04455501,   -6962890.2665,   7.4722,  0.007702, -0.00005939]]
    tt[0] = t
    for i in range(1,4):
        tt[i] = tt[i-1]*t
    for i in range(5):
        f[i] = fc[i][0]*3600
        for j in range(4):
            f[i] += fc[i][j+1] * tt[j]
        f[i] = fmod(f[i]*AS2R(), 2.0*pi)
    return f

def sunmoonpos_eci(tut, rsun, rmoon):
    ep2000 = [2000, 1, 1, 12, 0, 0]
    t = timediff(tut, epoch2time(ep2000)) / 86400.0 / 36525.0
    f = ast_args(t)   # astronomical arguments
    eps = 23.439291-0.0130042*t
    sine = sin(eps * D2R())
    cose = cos(eps * D2R())
    Ms = 357.5277233 + 35999.05034 * t
    ls = 280.460 + 36000.770 * t + 1.914666471 * sin(Ms * D2R()) + 0.019994643 * sin(2.0 * Ms * D2R())
    rs = AU() * (1.000140612 - 0.016708617 * cos(Ms * D2R()) - 0.000139589 * cos(2.0 * Ms * D2R()))
    sinl = sin(ls*D2R())
    cosl = cos(ls*D2R())
    rsun[0] = rs * cosl
    rsun[1] = rs * cose * sinl
    rsun[2] = rs * sine * sinl

    lm = 218.32 + 481267.883 * t + 6.29 * sin(f[0]) - 1.27 * sin(f[0] - 2.0 * f[3]) + \
         0.66 * sin(2.0 * f[3]) + 0.21 * sin(2.0 * f[0]) - 0.19 * sin(f[1]) - 0.11 * sin(2.0 * f[2])
    pm = 5.13 * sin(f[2]) + 0.28 * sin(f[0] + f[2]) - 0.28 * sin(f[2] - f[0]) - 0.17 * sin(f[2] - 2.0 * f[3])
    rm = 6378137.0 / sin((0.9508 + 0.0518 * cos(f[0]) + 0.0095 * cos(f[0] - 2.0 * f[3]) +
                         0.0078 * cos(2.0 * f[3]) + 0.0028 * cos(2.0 * f[0])) * D2R())
    sinl = sin(lm * D2R())
    cosl = cos(lm * D2R())
    sinp = sin(pm * D2R())
    cosp = cos(pm * D2R())
    rmoon[0] = rm * cosp * cosl
    rmoon[1] = rm * (cose * cosp * sinl - sine * sinp)
    rmoon[2] = rm * (sine * cosp * sinl + cose * sinp)

def Rx(t):
    return np.array([[1.0,    0.0,     0.0],
                     [0.0, cos(t), -sin(t)],
                     [0.0, sin(t),  cos(t)]])

def Ry(t):
    return np.array([[ cos(t), 0.0, sin(t)],
                     [    0.0, 1.0,    0.0],
                     [-sin(t), 0.0, cos(t)]])

def Rz(t):
    return np.array([[ cos(t), sin(t), 0.0],
                     [-sin(t), cos(t), 0.0],
                     [    0.0,    0.0, 1.0]])

def nut_iau1980(t, f):
    nut = np.array([
        [   0,   0,   0,   0,   1, -6798.4, -171996, -174.2, 92025,   8.9],
        [   0,   0,   2,  -2,   2,   182.6,  -13187,   -1.6,  5736,  -3.1],
        [   0,   0,   2,   0,   2,    13.7,   -2274,   -0.2,   977,  -0.5],
        [   0,   0,   0,   0,   2, -3399.2,    2062,    0.2,  -895,   0.5],
        [   0,  -1,   0,   0,   0,  -365.3,   -1426,    3.4,    54,  -0.1],
        [   1,   0,   0,   0,   0,    27.6,     712,    0.1,    -7,   0.0],
        [   0,   1,   2,  -2,   2,   121.7,    -517,    1.2,   224,  -0.6],
        [   0,   0,   2,   0,   1,    13.6,    -386,   -0.4,   200,   0.0],
        [   1,   0,   2,   0,   2,     9.1,    -301,    0.0,   129,  -0.1],
        [   0,  -1,   2,  -2,   2,   365.2,     217,   -0.5,   -95,   0.3],
        [  -1,   0,   0,   2,   0,    31.8,     158,    0.0,    -1,   0.0],
        [   0,   0,   2,  -2,   1,   177.8,     129,    0.1,   -70,   0.0],
        [  -1,   0,   2,   0,   2,    27.1,     123,    0.0,   -53,   0.0],
        [   1,   0,   0,   0,   1,    27.7,      63,    0.1,   -33,   0.0],
        [   0,   0,   0,   2,   0,    14.8,      63,    0.0,    -2,   0.0],
        [  -1,   0,   2,   2,   2,     9.6,     -59,    0.0,    26,   0.0],
        [  -1,   0,   0,   0,   1,   -27.4,     -58,   -0.1,    32,   0.0],
        [   1,   0,   2,   0,   1,     9.1,     -51,    0.0,    27,   0.0],
        [  -2,   0,   0,   2,   0,  -205.9,     -48,    0.0,     1,   0.0],
        [  -2,   0,   2,   0,   1,  1305.5,      46,    0.0,   -24,   0.0],
        [   0,   0,   2,   2,   2,     7.1,     -38,    0.0,    16,   0.0],
        [   2,   0,   2,   0,   2,     6.9,     -31,    0.0,    13,   0.0],
        [   2,   0,   0,   0,   0,    13.8,      29,    0.0,    -1,   0.0],
        [   1,   0,   2,  -2,   2,    23.9,      29,    0.0,   -12,   0.0],
        [   0,   0,   2,   0,   0,    13.6,      26,    0.0,    -1,   0.0],
        [   0,   0,   2,  -2,   0,   173.3,     -22,    0.0,     0,   0.0],
        [  -1,   0,   2,   0,   1,    27.0,      21,    0.0,   -10,   0.0],
        [   0,   2,   0,   0,   0,   182.6,      17,   -0.1,     0,   0.0],
        [   0,   2,   2,  -2,   2,    91.3,     -16,    0.1,     7,   0.0],
        [  -1,   0,   0,   2,   1,    32.0,      16,    0.0,    -8,   0.0],
        [   0,   1,   0,   0,   1,   386.0,     -15,    0.0,     9,   0.0],
        [   1,   0,   0,  -2,   1,   -31.7,     -13,    0.0,     7,   0.0],
        [   0,  -1,   0,   0,   1,  -346.6,     -12,    0.0,     6,   0.0],
        [   2,   0,  -2,   0,   0, -1095.2,      11,    0.0,     0,   0.0],
        [  -1,   0,   2,   2,   1,     9.5,     -10,    0.0,     5,   0.0],
        [   1,   0,   2,   2,   2,     5.6,      -8,    0.0,     3,   0.0],
        [   0,  -1,   2,   0,   2,    14.2,      -7,    0.0,     3,   0.0],
        [   0,   0,   2,   2,   1,     7.1,      -7,    0.0,     3,   0.0],
        [   1,   1,   0,  -2,   0,   -34.8,      -7,    0.0,     0,   0.0],
        [   0,   1,   2,   0,   2,    13.2,       7,    0.0,    -3,   0.0],
        [  -2,   0,   0,   2,   1,  -199.8,      -6,    0.0,     3,   0.0],
        [   0,   0,   0,   2,   1,    14.8,      -6,    0.0,     3,   0.0],
        [   2,   0,   2,  -2,   2,    12.8,       6,    0.0,    -3,   0.0],
        [   1,   0,   0,   2,   0,     9.6,       6,    0.0,     0,   0.0],
        [   1,   0,   2,  -2,   1,    23.9,       6,    0.0,    -3,   0.0],
        [   0,   0,   0,  -2,   1,   -14.7,      -5,    0.0,     3,   0.0],
        [   0,  -1,   2,  -2,   1,   346.6,      -5,    0.0,     3,   0.0],
        [   2,   0,   2,   0,   1,     6.9,      -5,    0.0,     3,   0.0],
        [   1,  -1,   0,   0,   0,    29.8,       5,    0.0,     0,   0.0],
        [   1,   0,   0,  -1,   0,   411.8,      -4,    0.0,     0,   0.0],
        [   0,   0,   0,   1,   0,    29.5,      -4,    0.0,     0,   0.0],
        [   0,   1,   0,  -2,   0,   -15.4,      -4,    0.0,     0,   0.0],
        [   1,   0,  -2,   0,   0,   -26.9,       4,    0.0,     0,   0.0],
        [   2,   0,   0,  -2,   1,   212.3,       4,    0.0,    -2,   0.0],
        [   0,   1,   2,  -2,   1,   119.6,       4,    0.0,    -2,   0.0],
        [   1,   1,   0,   0,   0,    25.6,      -3,    0.0,     0,   0.0],
        [   1,  -1,   0,  -1,   0, -3232.9,      -3,    0.0,     0,   0.0],
        [  -1,  -1,   2,   2,   2,     9.8,      -3,    0.0,     1,   0.0],
        [   0,  -1,   2,   2,   2,     7.2,      -3,    0.0,     1,   0.0],
        [   1,  -1,   2,   0,   2,     9.4,      -3,    0.0,     1,   0.0],
        [   3,   0,   2,   0,   2,     5.5,      -3,    0.0,     1,   0.0],
        [  -2,   0,   2,   0,   2,  1615.7,      -3,    0.0,     1,   0.0],
        [   1,   0,   2,   0,   0,     9.1,       3,    0.0,     0,   0.0],
        [  -1,   0,   2,   4,   2,     5.8,      -2,    0.0,     1,   0.0],
        [   1,   0,   0,   0,   2,    27.8,      -2,    0.0,     1,   0.0],
        [  -1,   0,   2,  -2,   1,   -32.6,      -2,    0.0,     1,   0.0],
        [   0,  -2,   2,  -2,   1,  6786.3,      -2,    0.0,     1,   0.0],
        [  -2,   0,   0,   0,   1,   -13.7,      -2,    0.0,     1,   0.0],
        [   2,   0,   0,   0,   1,    13.8,       2,    0.0,    -1,   0.0],
        [   3,   0,   0,   0,   0,     9.2,       2,    0.0,     0,   0.0],
        [   1,   1,   2,   0,   2,     8.9,       2,    0.0,    -1,   0.0],
        [   0,   0,   2,   1,   2,     9.3,       2,    0.0,    -1,   0.0],
        [   1,   0,   0,   2,   1,     9.6,      -1,    0.0,     0,   0.0],
        [   1,   0,   2,   2,   1,     5.6,      -1,    0.0,     1,   0.0],
        [   1,   1,   0,  -2,   1,   -34.7,      -1,    0.0,     0,   0.0],
        [   0,   1,   0,   2,   0,    14.2,      -1,    0.0,     0,   0.0],
        [   0,   1,   2,  -2,   0,   117.5,      -1,    0.0,     0,   0.0],
        [   0,   1,  -2,   2,   0,  -329.8,      -1,    0.0,     0,   0.0],
        [   1,   0,  -2,   2,   0,    23.8,      -1,    0.0,     0,   0.0],
        [   1,   0,  -2,  -2,   0,    -9.5,      -1,    0.0,     0,   0.0],
        [   1,   0,   2,  -2,   0,    32.8,      -1,    0.0,     0,   0.0],
        [   1,   0,   0,  -4,   0,   -10.1,      -1,    0.0,     0,   0.0],
        [   2,   0,   0,  -4,   0,   -15.9,      -1,    0.0,     0,   0.0],
        [   0,   0,   2,   4,   2,     4.8,      -1,    0.0,     0,   0.0],
        [   0,   0,   2,  -1,   2,    25.4,      -1,    0.0,     0,   0.0],
        [  -2,   0,   2,   4,   2,     7.3,      -1,    0.0,     1,   0.0],
        [   2,   0,   2,   2,   2,     4.7,      -1,    0.0,     0,   0.0],
        [   0,  -1,   2,   0,   1,    14.2,      -1,    0.0,     0,   0.0],
        [   0,   0,  -2,   0,   1,   -13.6,      -1,    0.0,     0,   0.0],
        [   0,   0,   4,  -2,   2,    12.7,       1,    0.0,     0,   0.0],
        [   0,   1,   0,   0,   2,   409.2,       1,    0.0,     0,   0.0],
        [   1,   1,   2,  -2,   2,    22.5,       1,    0.0,    -1,   0.0],
        [   3,   0,   2,  -2,   2,     8.7,       1,    0.0,     0,   0.0],
        [  -2,   0,   2,   2,   2,    14.6,       1,    0.0,    -1,   0.0],
        [  -1,   0,   0,   0,   2,   -27.3,       1,    0.0,    -1,   0.0],
        [   0,   0,  -2,   2,   1,  -169.0,       1,    0.0,     0,   0.0],
        [   0,   1,   2,   0,   1,    13.1,       1,    0.0,     0,   0.0],
        [  -1,   0,   4,   0,   2,     9.1,       1,    0.0,     0,   0.0],
        [   2,   1,   0,  -2,   0,   131.7,       1,    0.0,     0,   0.0],
        [   2,   0,   0,   2,   0,     7.1,       1,    0.0,     0,   0.0],
        [   2,   0,   2,  -2,   1,    12.8,       1,    0.0,    -1,   0.0],
        [   2,   0,  -2,   0,   1,  -943.2,       1,    0.0,     0,   0.0],
        [   1,  -1,   0,  -2,   0,   -29.3,       1,    0.0,     0,   0.0],
        [  -1,   0,   0,   1,   1,  -388.3,       1,    0.0,     0,   0.0],
        [  -1,  -1,   0,   2,   1,    35.0,       1,    0.0,     0,   0.0],
        [   0,   1,   0,   1,   0,    27.3,       1,    0.0,     0,   0.0]])

    dpsi = 0.0
    deps = 0.0
    for i in range(106):
        ang = 0.0
        for j in range(5):
            ang += nut[i][j] * f[j]
        dpsi += (nut[i][6]+nut[i][7]*t)*sin(ang)
        deps += (nut[i][8]+nut[i][9]*t)*cos(ang)
    return dpsi*float(1E-4)*AS2R(), deps*float(1E-4)*AS2R()

def eci2ecef(tutc, erpv):
    ep2000 = [2000, 1, 1, 12, 0, 0]
    tutc_ = tutc
    tgps = utc2gpst(tutc_)
    t = (timediff(tgps,epoch2time(ep2000))+19.0+32.184)/86400.0/36525.0
    t2 = t*t
    t3 = t2*t
    f = ast_args(t)
    ze = (2306.2181*t+0.30188*t2+0.017998*t3)*AS2R()
    th = (2004.3109*t-0.42665*t2-0.041833*t3)*AS2R()
    z = (2306.2181*t+1.09468*t2+0.018203*t3)*AS2R()
    eps = (84381.448-46.8150*t-0.00059*t2+0.001813*t3)*AS2R()
    R1 = Rz(-z)
    R2 = Ry(th)
    R3 = Rz(-ze)
    P = np.matmul(np.matmul(R1, R2), R3)

    dpsi, deps = nut_iau1980(t, f)
    R1 = Rx(-eps-deps)
    R2 = Rz(-dpsi)
    R3 = Rx(eps)
    N = np.matmul(np.matmul(R1, R2), R3)

    gmst_ = utc2gmst(tutc_,erpv[2])
    gast = gmst_+dpsi*cos(eps)
    gast += (0.00264*sin(f[4])+0.000063*sin(2.0*f[4]))*AS2R()

    R1 = Ry(-erpv[0])
    R2 = Rx(-erpv[1])
    R3 = Rz(gast)
    R = np.matmul(np.matmul(R1, R2), R3)
    U_ = np.matmul(np.matmul(R, N), P)
    return U_, gmst_

def sunmoonpos(tutc, erpv):
    rs = np.zeros(3)
    rm = np.zeros(3)
    tut = timeadd(tutc, erpv[2])   #  utc -> ut1
    sunmoonpos_eci(tut, rs, rm)
    U, gmst = eci2ecef(tutc,erpv)
    rsun = np.matmul(U, rs)
    rmoon = np.matmul(U, rm)
    return rsun, rmoon, gmst

def satantoff(time, rs, sat, pcv):
    dant = np.zeros(3)
    erpv = np.zeros(5)
    r = np.zeros(3)
    rsun, rmoon, gmst = sunmoonpos(gpst2utc(time),erpv)
    for i in range(3):
        r[i] = -rs[i]
    ez = normv3(r)
    for i in range(3):
        r[i] = rsun[i]-rs[i]
    es = normv3(r)
    r = cross3(ez,es)
    ey = normv3(r)
    ex = cross3(ey, ez)
    sys, prn = satsys(sat)
    if sys == "G" or sys == "J":  # /* L1-L2 */
        freq0 = float(1.57542E9)
        freq1 = float(1.22760E9)
    elif sys == "R":  # /* G1-G2 */
        freq0 = float(1.60200E9)
        freq1 = float(1.24600E9)
        # freq0 = sat2freq(sat,CODE_L1C,nav);
        # freq1 = sat2freq(sat,CODE_L2C,nav);
    elif sys == "E":  # /* E1-E5b */
        freq0 = float(1.57542E9)
        freq1 = float(1.17645E9)
    elif sys == "C":  # /* B1I-B2I */
        freq0 = float(1.561098E9)
        freq1 = float(1.26852E9)
    else:
        return 0
    C1 =  SQR(freq0)/(SQR(freq0)-SQR(freq1))
    C2 = -SQR(freq1)/(SQR(freq0)-SQR(freq1))
    for i in range(3):
        dant1 = pcv[sat][0] * ex[i] + pcv[sat][1] * ey[i] + pcv[sat][2] * ez[i]
        dant2 = pcv[sat][3] * ex[i] + pcv[sat][4] * ey[i] + pcv[sat][5] * ez[i]
        dant[i] = C1*dant1 + C2*dant2
    return dant